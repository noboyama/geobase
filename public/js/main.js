/// <reference path="./../../node_modules/@types/jquery/index.d.ts" />
/// <reference path="./../../node_modules/@types/jqueryui/index.d.ts" />
/// <reference path="./../../node_modules/@types/leaflet/index.d.ts" />
var g_Map = null;
var g_Geojson = null;
var GeoData2 = (function () {
    // コンストラクター
    function GeoData2() {
        this.layerData = new Array();
    }
    GeoData2.prototype.setLeyer = function (feature, layer) {
        var id = this.layerData.length;
        this.layerData.push({ id: id, feature: feature, layer: layer });
    };
    GeoData2.prototype.viewPopup = function (elm) {
        var feature = elm["feature"];
        var layer = elm["layer"];
        try {
            var popup = layer.getPopup();
            popup.openPopup();
        }
        catch (Exception) {
            popup = layer.bindPopup(feature.properties.name, { maxWidth: 500, closeOnClick: false });
            popup.openPopup();
        }
    };
    GeoData2.prototype.renderProperty = function (elm) {
        $(this.propertyDiv).empty();
        var feature = elm["feature"];
        if (feature != null) {
            for (var key in feature.properties) {
                $("<div class='line' >"
                    + "<div class='name' >" + key + "</div>"
                    + "<div class='value'>" + feature.properties[key] + "</div>"
                    + "</div>")
                    .appendTo(this.propertyDiv);
            }
        }
    };
    GeoData2.prototype.find = function (leaflet_id) {
        var ret = null;
        this.layerData.forEach(function (elm, idx) {
            if (elm["id"] == leaflet_id) {
                ret = elm;
                return;
            }
        });
        return ret;
    };
    GeoData2.prototype.renderList = function (xList, xProperty) {
        var _self = this;
        _self.propertyDiv = xProperty;
        $(xList).addClass("geodata_list");
        this.layerData.forEach(function (elm, idx) {
            var id = elm["id"];
            var feature = elm["feature"];
            $("<div item_id='" + id + "' class='selectee line' >" + feature.properties.name + "</div>")
                .appendTo(xList);
        });
        $(xList).selectable({ "selected": function (e, ui) {
                //$("#WayList .selected").removeClass("selected") ;
                var temp = $(ui.selected);
                var id = $(temp[0]).attr("item_id");
                var item = _self.find(Number(id));
                if (item != null) {
                    _self.viewPopup(item);
                    _self.renderProperty(item);
                }
            }
        });
    };
    return GeoData2;
}());
var LeafLetMap = (function () {
    // コンストラクター
    function LeafLetMap(sElemntID, sfile) {
        if (sfile === void 0) { sfile = null; }
        this.sJsonFile = null;
        this.sMapUrl = 'http://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png';
        this.sJsonFile = sfile;
        this.initLeaflet(sElemntID);
    }
    LeafLetMap.prototype.initLeaflet = function (sElemntID) {
        this.map = L.map(sElemntID);
        /* Add  Map layer  */
        L.tileLayer(this.sMapUrl, {
            attribution: "<a href='http://maps.gsi.go.jp/development/ichiran.html' target='_blank'>地理院タイル</a>"
        }).addTo(this.map);
        // 指定ファイルがあれば読み込む、なければAPI発行
        var url = "";
        if (this.sJsonFile == null)
            url = "./api/get";
        else
            url = this.sJsonFile;
        this.loadLayer(url);
        this.map.setView([35.3622222, 138.7313889], 10);
        $('#gpx_file').change(function () {
            var file = $(this).prop('files')[0];
            var pattern = /(.+)(\.[^.]+$)/;
            //「image-test」と表示されます
            var name = file.name.match(pattern)[1];
            $('#gpx_name').val(name);
        });
    };
    LeafLetMap.prototype.loadLayer = function (url) {
        var _this = this;
        if (this.map == null)
            return;
        $.getJSON(url, function (data) {
            if (data == null || data.length == 0) {
                _this.geojson = null;
                alert("データが登録されていません");
                return;
            }
            var html = "";
            _this.geoData = new GeoData2();
            _this.geojson = L.geoJson(data, {
                color: "#000000",
                opacity: 0.7,
                onEachFeature: function (feature, layer) {
                    if (_this.geoData != null) {
                        _this.geoData.setLeyer(feature, layer);
                    }
                }
            });
            _this.map.fitBounds(_this.geojson.getBounds());
            _this.geojson.addTo(_this.map);
            _this.geoData.renderList($("#WayList"), $("#Property"));
        });
    };
    LeafLetMap.prototype.gpxUpload = function () {
        var _this = this;
        if (this.map == null)
            return;
        var name = $("#gpx_name").val();
        if (this.geojson != null) {
            this.map.removeLayer(this.geojson);
        }
        $("#WayList").empty();
        $("#Property").empty();
        this.geoData = null;
        var telm = $('#gpx_upload').get(0);
        var fd = new FormData(telm);
        $.ajax({
            url: "/post/gpxfileupload?name=" + name,
            type: "POST",
            data: fd,
            processData: false,
            contentType: false,
            dataType: 'json'
        })
            .done(function (data) {
            var url = "./api/get";
            _this.loadLayer(url);
        });
        return false;
    };
    return LeafLetMap;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
